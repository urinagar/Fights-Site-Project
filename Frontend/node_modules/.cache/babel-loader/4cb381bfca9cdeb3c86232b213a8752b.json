{"ast":null,"code":"export class VacationsState {\n  constructor() {\n    this.vacations = [];\n  }\n\n}\nexport let VacationsActionType;\n\n(function (VacationsActionType) {\n  VacationsActionType[\"FetchVacations\"] = \"FetchVacations\";\n  VacationsActionType[\"AddVacation\"] = \"AddVacation\";\n  VacationsActionType[\"UpdateVacation\"] = \"UpdateVacation\";\n  VacationsActionType[\"DeleteVacation\"] = \"DeleteVacation\";\n})(VacationsActionType || (VacationsActionType = {}));\n\nexport function fetchVacationsAction(vacations) {\n  return {\n    type: VacationsActionType.FetchVacations,\n    payload: vacations\n  };\n}\nexport function addVacationAction(vacationToAdd) {\n  return {\n    type: VacationsActionType.AddVacation,\n    payload: vacationToAdd\n  };\n}\nexport function updateVacationAction(vacationToUpdate) {\n  return {\n    type: VacationsActionType.UpdateVacation,\n    payload: vacationToUpdate\n  };\n}\nexport function deleteVacationAction(idToDelete) {\n  return {\n    type: VacationsActionType.DeleteVacation,\n    payload: idToDelete\n  };\n}\nexport function vacationsReducer() {\n  let currentVacationsState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new VacationsState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newVacationsState = { ...currentVacationsState\n  };\n\n  switch (action.type) {\n    case VacationsActionType.FetchVacations:\n      newVacationsState.vacations = action.payload;\n      break;\n\n    case VacationsActionType.AddVacation:\n      newVacationsState.vacations.push(action.payload);\n      break;\n\n    case VacationsActionType.UpdateVacation:\n      const indexToUpdate = newVacationsState.vacations.findIndex(p => p.vacationId === action.payload.vacationId);\n      newVacationsState.vacations[indexToUpdate] = action.payload;\n      break;\n\n    case VacationsActionType.DeleteVacation:\n      const indexToDelete = newVacationsState.vacations.findIndex(p => p.vacationId === action.payload);\n      newVacationsState.vacations.splice(indexToDelete, 1);\n      break;\n  }\n\n  return newVacationsState;\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/web development/Lessons + Homework/Third Project/Fullstack/Frontend/src/Redux/VacationsState.ts"],"names":["VacationsState","vacations","VacationsActionType","fetchVacationsAction","type","FetchVacations","payload","addVacationAction","vacationToAdd","AddVacation","updateVacationAction","vacationToUpdate","UpdateVacation","deleteVacationAction","idToDelete","DeleteVacation","vacationsReducer","currentVacationsState","action","newVacationsState","push","indexToUpdate","findIndex","p","vacationId","indexToDelete","splice"],"mappings":"AAEA,OAAO,MAAMA,cAAN,CAAqB;AAAA;AAAA,SACjBC,SADiB,GACY,EADZ;AAAA;;AAAA;AAI5B,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAYZ,OAAO,SAASC,oBAAT,CAA8BF,SAA9B,EAA2E;AAC9E,SAAO;AAAEG,IAAAA,IAAI,EAAEF,mBAAmB,CAACG,cAA5B;AAA4CC,IAAAA,OAAO,EAAEL;AAArD,GAAP;AACH;AACD,OAAO,SAASM,iBAAT,CAA2BC,aAA3B,EAA0E;AAC7E,SAAO;AAAEJ,IAAAA,IAAI,EAAEF,mBAAmB,CAACO,WAA5B;AAAyCH,IAAAA,OAAO,EAAEE;AAAlD,GAAP;AACH;AACD,OAAO,SAASE,oBAAT,CAA8BC,gBAA9B,EAAgF;AACnF,SAAO;AAAEP,IAAAA,IAAI,EAAEF,mBAAmB,CAACU,cAA5B;AAA4CN,IAAAA,OAAO,EAAEK;AAArD,GAAP;AACH;AACD,OAAO,SAASE,oBAAT,CAA8BC,UAA9B,EAAmE;AACtE,SAAO;AAAEV,IAAAA,IAAI,EAAEF,mBAAmB,CAACa,cAA5B;AAA4CT,IAAAA,OAAO,EAAEQ;AAArD,GAAP;AACH;AAED,OAAO,SAASE,gBAAT,GAAiI;AAAA,MAAvGC,qBAAuG,uEAA/D,IAAIjB,cAAJ,EAA+D;AAAA,MAAzCkB,MAAyC;AAEpI,QAAMC,iBAAiB,GAAG,EAAE,GAAGF;AAAL,GAA1B;;AAEA,UAAQC,MAAM,CAACd,IAAf;AAEI,SAAKF,mBAAmB,CAACG,cAAzB;AACIc,MAAAA,iBAAiB,CAAClB,SAAlB,GAA8BiB,MAAM,CAACZ,OAArC;AACA;;AAEJ,SAAKJ,mBAAmB,CAACO,WAAzB;AACIU,MAAAA,iBAAiB,CAAClB,SAAlB,CAA4BmB,IAA5B,CAAiCF,MAAM,CAACZ,OAAxC;AACA;;AAEJ,SAAKJ,mBAAmB,CAACU,cAAzB;AACI,YAAMS,aAAa,GAAGF,iBAAiB,CAAClB,SAAlB,CAA4BqB,SAA5B,CAAsCC,CAAC,IAAIA,CAAC,CAACC,UAAF,KAAiBN,MAAM,CAACZ,OAAP,CAAekB,UAA3E,CAAtB;AACAL,MAAAA,iBAAiB,CAAClB,SAAlB,CAA4BoB,aAA5B,IAA6CH,MAAM,CAACZ,OAApD;AACA;;AAEJ,SAAKJ,mBAAmB,CAACa,cAAzB;AACI,YAAMU,aAAa,GAAGN,iBAAiB,CAAClB,SAAlB,CAA4BqB,SAA5B,CAAsCC,CAAC,IAAIA,CAAC,CAACC,UAAF,KAAiBN,MAAM,CAACZ,OAAnE,CAAtB;AACAa,MAAAA,iBAAiB,CAAClB,SAAlB,CAA4ByB,MAA5B,CAAmCD,aAAnC,EAAkD,CAAlD;AACA;AAlBR;;AAqBA,SAAON,iBAAP;AACH","sourcesContent":["import VacationModel from \"../Models/VacationModel\";\r\n\r\nexport class VacationsState {\r\n    public vacations: VacationModel[] = [];\r\n}\r\n\r\nexport enum VacationsActionType {\r\n    FetchVacations = \"FetchVacations\",\r\n    AddVacation = \"AddVacation\",\r\n    UpdateVacation = \"UpdateVacation\",\r\n    DeleteVacation = \"DeleteVacation\"\r\n}\r\n\r\nexport interface VacationsAction {\r\n    type: VacationsActionType; \r\n    payload: any; \r\n}\r\n\r\nexport function fetchVacationsAction(vacations: VacationModel[]): VacationsAction {\r\n    return { type: VacationsActionType.FetchVacations, payload: vacations };\r\n}\r\nexport function addVacationAction(vacationToAdd: VacationModel): VacationsAction {\r\n    return { type: VacationsActionType.AddVacation, payload: vacationToAdd };\r\n}\r\nexport function updateVacationAction(vacationToUpdate: VacationModel): VacationsAction {\r\n    return { type: VacationsActionType.UpdateVacation, payload: vacationToUpdate };\r\n}\r\nexport function deleteVacationAction(idToDelete: number): VacationsAction {\r\n    return { type: VacationsActionType.DeleteVacation, payload: idToDelete };\r\n}\r\n\r\nexport function vacationsReducer(currentVacationsState: VacationsState = new VacationsState(), action: VacationsAction): VacationsState {\r\n\r\n    const newVacationsState = { ...currentVacationsState };\r\n\r\n    switch (action.type) {\r\n\r\n        case VacationsActionType.FetchVacations: \r\n            newVacationsState.vacations = action.payload;\r\n            break;\r\n\r\n        case VacationsActionType.AddVacation: \r\n            newVacationsState.vacations.push(action.payload);\r\n            break;\r\n\r\n        case VacationsActionType.UpdateVacation: \r\n            const indexToUpdate = newVacationsState.vacations.findIndex(p => p.vacationId === action.payload.vacationId);\r\n            newVacationsState.vacations[indexToUpdate] = action.payload;\r\n            break;\r\n\r\n        case VacationsActionType.DeleteVacation: \r\n            const indexToDelete = newVacationsState.vacations.findIndex(p => p.vacationId === action.payload);\r\n            newVacationsState.vacations.splice(indexToDelete, 1);\r\n            break;\r\n    }\r\n\r\n    return newVacationsState;\r\n}"]},"metadata":{},"sourceType":"module"}