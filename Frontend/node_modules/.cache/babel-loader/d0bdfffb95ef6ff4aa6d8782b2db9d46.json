{"ast":null,"code":"import { AuthState } from './../Redux/AuthState';\nimport { vacationsStore } from './../Redux/Store';\nimport { addVacationAction, deleteVacationAction, fetchVacationsAction, updateVacationAction } from './../Redux/VacationsState';\nimport config from '../Utils/config';\nimport axios from 'axios';\n\nclass VacationsService {\n  async getAllVacations() {\n    if (vacationsStore.getState().vacations.length === 0) {\n      const loggedUser = new AuthState();\n      const response = await axios.get(config.urls.vacationsByUser + loggedUser.user.id);\n      const vacations = response.data;\n      vacationsStore.dispatch(fetchVacationsAction(vacations));\n      return vacations;\n    }\n\n    return vacationsStore.getState().vacations;\n  }\n\n  async getOneVacation(vacationId) {\n    const vacations = vacationsStore.getState().vacations;\n    const vacation = vacations.find(v => v.vacationId === vacationId);\n    if (vacation) return vacation;\n    const response = await axios.get(config.urls.vacations + vacationId);\n    return response.data;\n  }\n\n  async addVacation(vacation) {\n    const myFormData = new FormData();\n    myFormData.append(\"description\", vacation.description);\n    myFormData.append(\"destination\", vacation.destination);\n    myFormData.append(\"startingDate\", vacation.startingDate.toString());\n    myFormData.append(\"endingDate\", vacation.endingDate.toString());\n    myFormData.append(\"price\", vacation.price.toString());\n    myFormData.append(\"image\", vacation.image.item(0));\n    const response = await axios.post(config.urls.vacations, myFormData);\n    const addedVacation = response.data;\n    vacationsStore.dispatch(addVacationAction(addedVacation));\n    return addedVacation;\n  }\n\n  async updateVacation(vacation) {\n    const myFormData = new FormData();\n    myFormData.append(\"description\", vacation.description);\n    myFormData.append(\"destination\", vacation.destination);\n    myFormData.append(\"startingDate\", vacation.startingDate);\n    myFormData.append(\"endingDate\", vacation.endingDate);\n    myFormData.append(\"price\", vacation.price.toString());\n    myFormData.append(\"followersCount\", vacation.followersCount.toString());\n    myFormData.append(\"image\", vacation.image.item(0));\n    const response = await axios.put(config.urls.vacations + vacation.vacationId, myFormData);\n    const updatedVacation = response.data;\n    vacationsStore.dispatch(updateVacationAction(updatedVacation));\n    return updatedVacation;\n  }\n\n  async deleteVacation(vacationId) {\n    await axios.delete(config.urls.vacations + vacationId);\n    vacationsStore.dispatch(deleteVacationAction(vacationId));\n  }\n\n  async addFollower(vacationId, userId) {\n    const response = await axios.post(config.urls.follow + vacationId.toString() + \"/\" + userId.toString());\n    return response.data;\n  }\n\n  async isFollowing(vacationId, userId) {\n    const response = await axios.get(config.urls.follow + vacationId.toString() + \"/\" + userId.toString());\n    return response.data;\n  }\n\n}\n\nconst vacationsService = new VacationsService();\nexport default vacationsService;","map":{"version":3,"sources":["C:/Users/user/Desktop/web development/Lessons + Homework/Third Project/Fullstack/Frontend/src/Services/VacationsService.ts"],"names":["AuthState","vacationsStore","addVacationAction","deleteVacationAction","fetchVacationsAction","updateVacationAction","config","axios","VacationsService","getAllVacations","getState","vacations","length","loggedUser","response","get","urls","vacationsByUser","user","id","data","dispatch","getOneVacation","vacationId","vacation","find","v","addVacation","myFormData","FormData","append","description","destination","startingDate","toString","endingDate","price","image","item","post","addedVacation","updateVacation","followersCount","put","updatedVacation","deleteVacation","delete","addFollower","userId","follow","isFollowing","vacationsService"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,oBAAlD,EAAwEC,oBAAxE,QAAoG,2BAApG;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAN,CAAuB;AACS,QAAfC,eAAe,GAA4B;AAEpD,QAAGR,cAAc,CAACS,QAAf,GAA0BC,SAA1B,CAAoCC,MAApC,KAA+C,CAAlD,EAAqD;AACjD,YAAMC,UAAU,GAAG,IAAIb,SAAJ,EAAnB;AACA,YAAMc,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAA2BT,MAAM,CAACU,IAAP,CAAYC,eAAZ,GAA8BJ,UAAU,CAACK,IAAX,CAAgBC,EAAzE,CAAvB;AACA,YAAMR,SAAS,GAAGG,QAAQ,CAACM,IAA3B;AACAnB,MAAAA,cAAc,CAACoB,QAAf,CAAwBjB,oBAAoB,CAACO,SAAD,CAA5C;AACA,aAAOA,SAAP;AACH;;AAED,WAAOV,cAAc,CAACS,QAAf,GAA0BC,SAAjC;AACH;;AAE0B,QAAdW,cAAc,CAACC,UAAD,EAA6C;AACpE,UAAMZ,SAAS,GAAGV,cAAc,CAACS,QAAf,GAA0BC,SAA5C;AACA,UAAMa,QAAQ,GAAGb,SAAS,CAACc,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBA,UAArC,CAAjB;AACA,QAAGC,QAAH,EAAc,OAAOA,QAAP;AAEd,UAAMV,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAyBT,MAAM,CAACU,IAAP,CAAYL,SAAZ,GAAwBY,UAAjD,CAAvB;AACA,WAAOT,QAAQ,CAACM,IAAhB;AACH;;AAEuB,QAAXO,WAAW,CAACH,QAAD,EAAkD;AACtE,UAAMI,UAAU,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,UAAU,CAACE,MAAX,CAAkB,aAAlB,EAAiCN,QAAQ,CAACO,WAA1C;AACAH,IAAAA,UAAU,CAACE,MAAX,CAAkB,aAAlB,EAAiCN,QAAQ,CAACQ,WAA1C;AACAJ,IAAAA,UAAU,CAACE,MAAX,CAAkB,cAAlB,EAAkCN,QAAQ,CAACS,YAAT,CAAsBC,QAAtB,EAAlC;AACAN,IAAAA,UAAU,CAACE,MAAX,CAAkB,YAAlB,EAAgCN,QAAQ,CAACW,UAAT,CAAoBD,QAApB,EAAhC;AACAN,IAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2BN,QAAQ,CAACY,KAAT,CAAeF,QAAf,EAA3B;AACAN,IAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2BN,QAAQ,CAACa,KAAT,CAAeC,IAAf,CAAoB,CAApB,CAA3B;AACA,UAAMxB,QAAQ,GAAG,MAAMP,KAAK,CAACgC,IAAN,CAA0BjC,MAAM,CAACU,IAAP,CAAYL,SAAtC,EAAiDiB,UAAjD,CAAvB;AACA,UAAMY,aAAa,GAAG1B,QAAQ,CAACM,IAA/B;AACAnB,IAAAA,cAAc,CAACoB,QAAf,CAAwBnB,iBAAiB,CAACsC,aAAD,CAAzC;AACA,WAAOA,aAAP;AACH;;AAE0B,QAAdC,cAAc,CAACjB,QAAD,EAAkD;AACzE,UAAMI,UAAU,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,UAAU,CAACE,MAAX,CAAkB,aAAlB,EAAiCN,QAAQ,CAACO,WAA1C;AACAH,IAAAA,UAAU,CAACE,MAAX,CAAkB,aAAlB,EAAiCN,QAAQ,CAACQ,WAA1C;AACAJ,IAAAA,UAAU,CAACE,MAAX,CAAkB,cAAlB,EAAkCN,QAAQ,CAACS,YAA3C;AACAL,IAAAA,UAAU,CAACE,MAAX,CAAkB,YAAlB,EAAgCN,QAAQ,CAACW,UAAzC;AACAP,IAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2BN,QAAQ,CAACY,KAAT,CAAeF,QAAf,EAA3B;AACAN,IAAAA,UAAU,CAACE,MAAX,CAAkB,gBAAlB,EAAoCN,QAAQ,CAACkB,cAAT,CAAwBR,QAAxB,EAApC;AACAN,IAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2BN,QAAQ,CAACa,KAAT,CAAeC,IAAf,CAAoB,CAApB,CAA3B;AACA,UAAMxB,QAAQ,GAAG,MAAMP,KAAK,CAACoC,GAAN,CAAyBrC,MAAM,CAACU,IAAP,CAAYL,SAAZ,GAAwBa,QAAQ,CAACD,UAA1D,EAAsEK,UAAtE,CAAvB;AACA,UAAMgB,eAAe,GAAG9B,QAAQ,CAACM,IAAjC;AACAnB,IAAAA,cAAc,CAACoB,QAAf,CAAwBhB,oBAAoB,CAACuC,eAAD,CAA5C;AACA,WAAOA,eAAP;AACH;;AAE0B,QAAdC,cAAc,CAACtB,UAAD,EAAoC;AAC3D,UAAMhB,KAAK,CAACuC,MAAN,CAA4BxC,MAAM,CAACU,IAAP,CAAYL,SAAZ,GAAwBY,UAApD,CAAN;AACAtB,IAAAA,cAAc,CAACoB,QAAf,CAAwBlB,oBAAoB,CAACoB,UAAD,CAA5C;AAEH;;AAEuB,QAAXwB,WAAW,CAACxB,UAAD,EAAqByB,MAArB,EAAuD;AAC3E,UAAMlC,QAAQ,GAAG,MAAMP,KAAK,CAACgC,IAAN,CAAoBjC,MAAM,CAACU,IAAP,CAAYiC,MAAZ,GAAqB1B,UAAU,CAACW,QAAX,EAArB,GAA6C,GAA7C,GAAmDc,MAAM,CAACd,QAAP,EAAvE,CAAvB;AACA,WAAOpB,QAAQ,CAACM,IAAhB;AACH;;AAEuB,QAAX8B,WAAW,CAAC3B,UAAD,EAAqByB,MAArB,EAAsD;AAC1E,UAAMlC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAmBT,MAAM,CAACU,IAAP,CAAYiC,MAAZ,GAAqB1B,UAAU,CAACW,QAAX,EAArB,GAA6C,GAA7C,GAAmDc,MAAM,CAACd,QAAP,EAAtE,CAAvB;AACA,WAAOpB,QAAQ,CAACM,IAAhB;AACH;;AAlEkB;;AAqEvB,MAAM+B,gBAAgB,GAAG,IAAI3C,gBAAJ,EAAzB;AACA,eAAe2C,gBAAf","sourcesContent":["import { AuthState } from './../Redux/AuthState';\r\nimport { vacationsStore } from './../Redux/Store';\r\nimport { addVacationAction, deleteVacationAction, fetchVacationsAction, updateVacationAction } from './../Redux/VacationsState';\r\nimport VacationModel from \"../Models/VacationModel\";\r\nimport config from '../Utils/config';\r\nimport axios from 'axios';\r\n\r\nclass VacationsService {\r\n    public async getAllVacations(): Promise<VacationModel[]>{\r\n\r\n        if(vacationsStore.getState().vacations.length === 0) {\r\n            const loggedUser = new AuthState()            \r\n            const response = await axios.get<VacationModel[]>(config.urls.vacationsByUser + loggedUser.user.id);\r\n            const vacations = response.data;   \r\n            vacationsStore.dispatch(fetchVacationsAction(vacations));\r\n            return vacations;\r\n        }\r\n\r\n        return vacationsStore.getState().vacations;\r\n    }\r\n\r\n    public async getOneVacation(vacationId: number): Promise<VacationModel> {\r\n        const vacations = vacationsStore.getState().vacations;\r\n        const vacation = vacations.find(v => v.vacationId === vacationId);\r\n        if(vacation)  return vacation;\r\n\r\n        const response = await axios.get<VacationModel>(config.urls.vacations + vacationId);\r\n        return response.data;\r\n    }\r\n\r\n    public async addVacation(vacation: VacationModel): Promise<VacationModel> {\r\n        const myFormData = new FormData();\r\n        myFormData.append(\"description\", vacation.description);\r\n        myFormData.append(\"destination\", vacation.destination);\r\n        myFormData.append(\"startingDate\", vacation.startingDate.toString());\r\n        myFormData.append(\"endingDate\", vacation.endingDate.toString());\r\n        myFormData.append(\"price\", vacation.price.toString());\r\n        myFormData.append(\"image\", vacation.image.item(0));        \r\n        const response = await axios.post<VacationModel>(config.urls.vacations, myFormData);\r\n        const addedVacation = response.data;\r\n        vacationsStore.dispatch(addVacationAction(addedVacation));\r\n        return addedVacation;\r\n    }\r\n\r\n    public async updateVacation(vacation: VacationModel): Promise<VacationModel> {\r\n        const myFormData = new FormData();\r\n        myFormData.append(\"description\", vacation.description);\r\n        myFormData.append(\"destination\", vacation.destination);\r\n        myFormData.append(\"startingDate\", vacation.startingDate);\r\n        myFormData.append(\"endingDate\", vacation.endingDate);\r\n        myFormData.append(\"price\", vacation.price.toString());\r\n        myFormData.append(\"followersCount\", vacation.followersCount.toString());\r\n        myFormData.append(\"image\", vacation.image.item(0));\r\n        const response = await axios.put<VacationModel>(config.urls.vacations + vacation.vacationId, myFormData);\r\n        const updatedVacation = response.data;\r\n        vacationsStore.dispatch(updateVacationAction(updatedVacation));\r\n        return updatedVacation;\r\n    }\r\n\r\n    public async deleteVacation(vacationId: number): Promise<void> {\r\n        await axios.delete<VacationModel>(config.urls.vacations + vacationId);\r\n        vacationsStore.dispatch(deleteVacationAction(vacationId));\r\n\r\n    }\r\n\r\n    public async addFollower(vacationId: number, userId: number): Promise<boolean> {\r\n        const response = await axios.post<boolean>(config.urls.follow + vacationId.toString() + \"/\" + userId.toString());        \r\n        return response.data;\r\n    }\r\n\r\n    public async isFollowing(vacationId: number, userId: number): Promise<boolean>{\r\n        const response = await axios.get<boolean>(config.urls.follow + vacationId.toString() + \"/\" + userId.toString());\r\n        return response.data;\r\n    }\r\n\r\n}\r\nconst vacationsService = new VacationsService();\r\nexport default vacationsService;\r\n\r\n"]},"metadata":{},"sourceType":"module"}